//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Inputs/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Deplacement"",
            ""id"": ""beb3d9b0-0176-4e8e-9ef1-fbc600d16ab5"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""84eaff0d-5b99-4bd8-996b-17537409ab14"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""16380318-501c-4b46-b995-983125365814"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2f7b2ad6-bbd8-4726-8009-608f6efb8cb8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e111145f-6a8a-43dc-89f9-b74677b66aca"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""520112bf-3de8-4d7a-af17-262905393f64"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ee79b637-dbba-463a-9205-a13769222c20"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Menuing"",
            ""id"": ""a228f95a-d447-47fe-94e4-212c154aba77"",
            ""actions"": [
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""ec651a2f-d60b-4c48-a48b-44c71242477c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PassiveItem"",
                    ""type"": ""Button"",
                    ""id"": ""2700a245-561e-40de-b01d-16dda953ebcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef54ba3c-1810-466c-868d-be3008d3f32a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c76aea9e-806c-4658-9a1b-e258d29b6f14"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PassiveItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Action"",
            ""id"": ""9fb63638-d9ba-4f2c-a8c9-000b17d48fb7"",
            ""actions"": [
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""7fdf0b2d-2133-43af-91a1-90952b593f66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""2f68a785-838c-4bae-98c6-adcb0fd52098"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RecupItem"",
                    ""type"": ""Button"",
                    ""id"": ""f9d30448-146c-4469-8b52-16eb412494ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04e3eee4-c386-492c-b177-223d7b478d62"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8234ca88-2595-4e98-9ec6-a553f62e5217"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02aa0edb-ad74-46f1-bf9d-8bda59c951c8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RecupItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""b3fa55dc-9558-47aa-8cad-a85445062f85"",
            ""actions"": [
                {
                    ""name"": ""UpdateHeartHUD"",
                    ""type"": ""Button"",
                    ""id"": ""f758d242-a404-4ac7-a3be-9f150ae7e989"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeDamage"",
                    ""type"": ""Button"",
                    ""id"": ""80936a37-220c-4c6f-88f7-b8dd19c16c2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Heal"",
                    ""type"": ""Button"",
                    ""id"": ""c9ed2a17-f938-4bc8-89b2-750eae718a63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveHeart"",
                    ""type"": ""Button"",
                    ""id"": ""e309addd-7eb5-4d5f-a780-bbe3028de7ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddHeart"",
                    ""type"": ""Button"",
                    ""id"": ""012190fd-33f1-4951-95c3-144fd9271940"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""25f813ef-f092-485e-9a7e-552dd3c38b8c"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeDamage"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32ba3591-fb2c-4f30-9f50-79837a1eb86a"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Heal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""41195242-03af-44f5-88aa-081e82bf4226"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddHeart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f2416c6-dc21-4aee-b2a1-9e542fba13e0"",
                    ""path"": ""<Keyboard>/numpad0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpdateHeartHUD"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1431132-f116-41df-8c87-86d7008ea3fb"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveHeart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Deplacement
        m_Deplacement = asset.FindActionMap("Deplacement", throwIfNotFound: true);
        m_Deplacement_Movement = m_Deplacement.FindAction("Movement", throwIfNotFound: true);
        // Menuing
        m_Menuing = asset.FindActionMap("Menuing", throwIfNotFound: true);
        m_Menuing_Map = m_Menuing.FindAction("Map", throwIfNotFound: true);
        m_Menuing_PassiveItem = m_Menuing.FindAction("PassiveItem", throwIfNotFound: true);
        // Action
        m_Action = asset.FindActionMap("Action", throwIfNotFound: true);
        m_Action_UseItem = m_Action.FindAction("UseItem", throwIfNotFound: true);
        m_Action_Fire = m_Action.FindAction("Fire", throwIfNotFound: true);
        m_Action_RecupItem = m_Action.FindAction("RecupItem", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_UpdateHeartHUD = m_Debug.FindAction("UpdateHeartHUD", throwIfNotFound: true);
        m_Debug_TakeDamage = m_Debug.FindAction("TakeDamage", throwIfNotFound: true);
        m_Debug_Heal = m_Debug.FindAction("Heal", throwIfNotFound: true);
        m_Debug_RemoveHeart = m_Debug.FindAction("RemoveHeart", throwIfNotFound: true);
        m_Debug_AddHeart = m_Debug.FindAction("AddHeart", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Deplacement
    private readonly InputActionMap m_Deplacement;
    private List<IDeplacementActions> m_DeplacementActionsCallbackInterfaces = new List<IDeplacementActions>();
    private readonly InputAction m_Deplacement_Movement;
    public struct DeplacementActions
    {
        private @PlayerInputs m_Wrapper;
        public DeplacementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Deplacement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Deplacement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeplacementActions set) { return set.Get(); }
        public void AddCallbacks(IDeplacementActions instance)
        {
            if (instance == null || m_Wrapper.m_DeplacementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DeplacementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IDeplacementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IDeplacementActions instance)
        {
            if (m_Wrapper.m_DeplacementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDeplacementActions instance)
        {
            foreach (var item in m_Wrapper.m_DeplacementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DeplacementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DeplacementActions @Deplacement => new DeplacementActions(this);

    // Menuing
    private readonly InputActionMap m_Menuing;
    private List<IMenuingActions> m_MenuingActionsCallbackInterfaces = new List<IMenuingActions>();
    private readonly InputAction m_Menuing_Map;
    private readonly InputAction m_Menuing_PassiveItem;
    public struct MenuingActions
    {
        private @PlayerInputs m_Wrapper;
        public MenuingActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Map => m_Wrapper.m_Menuing_Map;
        public InputAction @PassiveItem => m_Wrapper.m_Menuing_PassiveItem;
        public InputActionMap Get() { return m_Wrapper.m_Menuing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuingActions set) { return set.Get(); }
        public void AddCallbacks(IMenuingActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuingActionsCallbackInterfaces.Add(instance);
            @Map.started += instance.OnMap;
            @Map.performed += instance.OnMap;
            @Map.canceled += instance.OnMap;
            @PassiveItem.started += instance.OnPassiveItem;
            @PassiveItem.performed += instance.OnPassiveItem;
            @PassiveItem.canceled += instance.OnPassiveItem;
        }

        private void UnregisterCallbacks(IMenuingActions instance)
        {
            @Map.started -= instance.OnMap;
            @Map.performed -= instance.OnMap;
            @Map.canceled -= instance.OnMap;
            @PassiveItem.started -= instance.OnPassiveItem;
            @PassiveItem.performed -= instance.OnPassiveItem;
            @PassiveItem.canceled -= instance.OnPassiveItem;
        }

        public void RemoveCallbacks(IMenuingActions instance)
        {
            if (m_Wrapper.m_MenuingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuingActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuingActions @Menuing => new MenuingActions(this);

    // Action
    private readonly InputActionMap m_Action;
    private List<IActionActions> m_ActionActionsCallbackInterfaces = new List<IActionActions>();
    private readonly InputAction m_Action_UseItem;
    private readonly InputAction m_Action_Fire;
    private readonly InputAction m_Action_RecupItem;
    public struct ActionActions
    {
        private @PlayerInputs m_Wrapper;
        public ActionActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseItem => m_Wrapper.m_Action_UseItem;
        public InputAction @Fire => m_Wrapper.m_Action_Fire;
        public InputAction @RecupItem => m_Wrapper.m_Action_RecupItem;
        public InputActionMap Get() { return m_Wrapper.m_Action; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionActions set) { return set.Get(); }
        public void AddCallbacks(IActionActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionActionsCallbackInterfaces.Add(instance);
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @RecupItem.started += instance.OnRecupItem;
            @RecupItem.performed += instance.OnRecupItem;
            @RecupItem.canceled += instance.OnRecupItem;
        }

        private void UnregisterCallbacks(IActionActions instance)
        {
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @RecupItem.started -= instance.OnRecupItem;
            @RecupItem.performed -= instance.OnRecupItem;
            @RecupItem.canceled -= instance.OnRecupItem;
        }

        public void RemoveCallbacks(IActionActions instance)
        {
            if (m_Wrapper.m_ActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionActions @Action => new ActionActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private List<IDebugActions> m_DebugActionsCallbackInterfaces = new List<IDebugActions>();
    private readonly InputAction m_Debug_UpdateHeartHUD;
    private readonly InputAction m_Debug_TakeDamage;
    private readonly InputAction m_Debug_Heal;
    private readonly InputAction m_Debug_RemoveHeart;
    private readonly InputAction m_Debug_AddHeart;
    public struct DebugActions
    {
        private @PlayerInputs m_Wrapper;
        public DebugActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpdateHeartHUD => m_Wrapper.m_Debug_UpdateHeartHUD;
        public InputAction @TakeDamage => m_Wrapper.m_Debug_TakeDamage;
        public InputAction @Heal => m_Wrapper.m_Debug_Heal;
        public InputAction @RemoveHeart => m_Wrapper.m_Debug_RemoveHeart;
        public InputAction @AddHeart => m_Wrapper.m_Debug_AddHeart;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void AddCallbacks(IDebugActions instance)
        {
            if (instance == null || m_Wrapper.m_DebugActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DebugActionsCallbackInterfaces.Add(instance);
            @UpdateHeartHUD.started += instance.OnUpdateHeartHUD;
            @UpdateHeartHUD.performed += instance.OnUpdateHeartHUD;
            @UpdateHeartHUD.canceled += instance.OnUpdateHeartHUD;
            @TakeDamage.started += instance.OnTakeDamage;
            @TakeDamage.performed += instance.OnTakeDamage;
            @TakeDamage.canceled += instance.OnTakeDamage;
            @Heal.started += instance.OnHeal;
            @Heal.performed += instance.OnHeal;
            @Heal.canceled += instance.OnHeal;
            @RemoveHeart.started += instance.OnRemoveHeart;
            @RemoveHeart.performed += instance.OnRemoveHeart;
            @RemoveHeart.canceled += instance.OnRemoveHeart;
            @AddHeart.started += instance.OnAddHeart;
            @AddHeart.performed += instance.OnAddHeart;
            @AddHeart.canceled += instance.OnAddHeart;
        }

        private void UnregisterCallbacks(IDebugActions instance)
        {
            @UpdateHeartHUD.started -= instance.OnUpdateHeartHUD;
            @UpdateHeartHUD.performed -= instance.OnUpdateHeartHUD;
            @UpdateHeartHUD.canceled -= instance.OnUpdateHeartHUD;
            @TakeDamage.started -= instance.OnTakeDamage;
            @TakeDamage.performed -= instance.OnTakeDamage;
            @TakeDamage.canceled -= instance.OnTakeDamage;
            @Heal.started -= instance.OnHeal;
            @Heal.performed -= instance.OnHeal;
            @Heal.canceled -= instance.OnHeal;
            @RemoveHeart.started -= instance.OnRemoveHeart;
            @RemoveHeart.performed -= instance.OnRemoveHeart;
            @RemoveHeart.canceled -= instance.OnRemoveHeart;
            @AddHeart.started -= instance.OnAddHeart;
            @AddHeart.performed -= instance.OnAddHeart;
            @AddHeart.canceled -= instance.OnAddHeart;
        }

        public void RemoveCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDebugActions instance)
        {
            foreach (var item in m_Wrapper.m_DebugActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DebugActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IDeplacementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IMenuingActions
    {
        void OnMap(InputAction.CallbackContext context);
        void OnPassiveItem(InputAction.CallbackContext context);
    }
    public interface IActionActions
    {
        void OnUseItem(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnRecupItem(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnUpdateHeartHUD(InputAction.CallbackContext context);
        void OnTakeDamage(InputAction.CallbackContext context);
        void OnHeal(InputAction.CallbackContext context);
        void OnRemoveHeart(InputAction.CallbackContext context);
        void OnAddHeart(InputAction.CallbackContext context);
    }
}
